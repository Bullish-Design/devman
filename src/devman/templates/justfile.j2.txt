# src/devman/templates/justfile.j2
# justfile - {{name}}
set dotenv-load

# List available commands
default:
    @just --list

# Enter development shell
shell:
    devenv shell

# Start development server
dev:
{%if project_type == "api"%}
    uv run fastapi dev src/{{name}}/main.py --host 0.0.0.0 --reload
{%endif%}
{%if project_type == "web"%}
    uv run flask --app src/{{name}}/app.py run --debug
{%endif%}
{%if project_type == "cli"%}
    uv run python -m {{name}}.cli
{%endif%}
{%if project_type == "ml"%}
    uv run jupyter lab --ip=0.0.0.0 --no-browser
{%endif%}

# Run tests
test:
    uv run pytest tests/ -v

# Run tests with coverage
test-cov:
    uv run pytest tests/ --cov=src/{{name}} --cov-report=html

# Lint and format
lint:
    uv run ruff format src/ tests/
    uv run ruff check src/ tests/ --fix

# Type check
check:
    uv run mypy src/

# Security audit
audit:
    uv run pip-audit

# Install local dependency
install-local dep:
    uv add --editable ../{{dep}}

# Update dependencies  
update:
    uv lock --upgrade
    uv sync

{%if container_type == "devenv"%}
# Build devenv container
build:
    devenv container build {{name}}

# Run container
run:
    docker run --rm -p {%if project_type == "api"%}8000:8000{%endif%}{%if project_type == "web"%}5000:5000{%endif%} localhost:5000/{{name}}

# Push to registry
push:
    devenv container build {{name}}
    docker push localhost:5000/{{name}}
{%endif%}

{%if container_type == "docker"%}
# Build docker container
build:
    docker compose build

# Start all services
up:
    docker compose up -d

# Stop all services
down:
    docker compose down

# View logs
logs:
    docker compose logs -f
{%endif%}

{%if use_database%}
# Database migration
migrate:
    uv run alembic upgrade head

# Create migration
migrate-create message:
    uv run alembic revision --autogenerate -m "{{message}}"
{%endif%}

# Clean artifacts
clean:
    rm -rf .pytest_cache __pycache__ .coverage htmlcov/
    find . -type d -name "__pycache__" -delete